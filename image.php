<?php

// WARNING: THIS IS AN AUTOGENERATED FILE. MANUAL CHANGES MAY BE OVERWRITTEN
// COPYRIGHT (C) 2001, 2012 NUSPHERE CORP. http://www.nusphere.com/
// COPYRIGHT (C) 1997, 2012 the PHP Documentation Group http://www.php.net/
//
// IF YOU FIND AN INCONSISTENCY, PLEASE REPORT AT http://www.nusphere.com/constact_us/

/**
 * @module Image
 * @version 7006
 * @created Jun 25 2012
 * @verified
 * PHP is not limited to creating just HTML output. It can also be used to create
 * and manipulate image files in a variety of different image formats, including
 * gif, png, jpg, wbmp, and xpm. Even more convenient, PHP can output image
 * streams directly to a browser. You will need to compile PHP with the GD library
 * of image functions for this to work. GD and PHP may also require other
 * libraries, depending on which image formats you want to work with.
 * You can use the image functions in PHP to get the size of , , , , and images.
 * If you have the library (available at ) you will also be able to create and
 * manipulate images.
 * The format of images you are able to manipulate depend on the version of you
 * install, and any other libraries might need to access those image formats.
 * Versions of older than gd-1.6 support GIF format images, and do not support
 * PNG, where versions greater than gd-1.6 support PNG, not GIF.
 * You may wish to enhance GD to handle more image formats. <table> <tr> <td>Image
 * format|<td> <td>Library to download|<td> <td>Notes|<td> |<tr> <tr>
 * <td><b>gif</b>|<td> <td>|<td> <td> Only supported in GD versions older than
 * gd-1.6. <i>Read-only </i> GIF support is available with PHP 4.3.0 and the
 * bundled GD-library. |<td> |<tr> <tr> <td><b>jpeg-6b</b>|<td> <td>|<td>
 * <td>|<td> |<tr> <tr> <td><b>png</b>|<td> <td>|<td> <td> Only supported in GD
 * versions greater than gd-1.6. |<td> |<tr> <tr> <td><b>xpm</b>|<td> <td>|<td>
 * <td> It's likely you have this library already available, if your system has an
 * installed X-Environment. |<td> |<tr> </table>
 * You may wish to enhance GD to deal with different fonts. The following font
 * libraries are supported: <table> <tr> <td>Font library|<td> <td>Download|<td>
 * <td>Notes|<td> |<tr> <tr> <td><b>FreeType 1.x</b>|<td> <td>|<td> <td>|<td>
 * |<tr> <tr> <td><b>FreeType 2</b>|<td> <td>|<td> <td>|<td> |<tr> <tr>
 * <td><b>T1lib</b>|<td> <td>)|<td> <td> Support for Type 1 fonts. |<td> |<tr>
 * </table>
 * If you have PHP compiled with you are able to work with information stored in
 * headers of and images. This way you can read meta data generated by digital
 * cameras as mentioned above. These functions does not require the library.
 * To enable GD-support configure PHP , where DIR is the GD base install
 * directory. To use the recommended bundled version of the GD library (which was
 * first bundled in PHP 4.3.0), use the configure option . In Windows, you'll
 * include the GD2 DLL as an extension in . The GD1 DLL was removed in PHP 4.3.2.
 * Also note that the preferred truecolor image functions, such as , require GD2.
 * To enable exif support in Windows, php_mbstring.dll must be loaded prior to
 * php_exif.dll in php.ini.
 * To disable GD support in add to your configure line.<i>PHP 3</i>
 * Enhance the capabilities of GD to handle more image formats by specifying the
 * configure switch to your PHP configure line.
 * Enhance the capabilities of GD to deal with different fonts by specifying the
 * configure switch to your PHP configure line.
 * The behaviour of these functions is affected by settings in .
 * Exif supports automatically conversion for Unicode and JIS character encodings
 * of user comments when module is available. This is done by first decoding the
 * comment using the specified characterset. The result is then encoded with
 * another characterset which should match your output. For further details and
 * definition of the PHP_INI_* constants see . mbstring
 * Here's a short explanation of the configuration directives.
 * This extension has no resource types defined.
 * The constants below are defined by this extension, and will only be available
 * when the extension has either been compiled into PHP or dynamically loaded at
 * runtime.
 * This example would be called from a page with a tag like: &lt;img
 * src="button.php?text=text"&gt;. The above button.php script then takes this
 * "text" string and overlays it on top of a base image which in this case is
 * "images/button1.png" and outputs the resulting image. This is a very convenient
 * way to avoid having to draw new button images every time you want to change the
 * text of a button. With this method they are dynamically
 * generated.<p><b>Example:</b><code>
 * &lt;?php
 *     header("Content-type: image/png");
 *     $string = $_GET['text'];
 *     $im     = imagecreatefrompng("images/button1.png");
 *     $orange = imagecolorallocate($im, 220, 210, 60);
 *     $px     = (imagesx($im) - 7.5 * strlen($string)) / 2;
 *     imagestring($im, 3, $px, 9, $string, $orange);
 *     imagepng($im);
 *     imagedestroy($im);
 * ?&gt;
 * </code>
 */
//


define("IMG_GIF", 1);
define("IMG_JPG", 2);
define("IMG_JPEG", 2);
define("IMG_PNG", 4);
define("IMG_WBMP", 8);
define("IMG_XPM", 16);
define("IMG_COLOR_TILED", -5);
define("IMG_COLOR_STYLED", -2);
define("IMG_COLOR_BRUSHED", -3);
define("IMG_COLOR_STYLEDBRUSHED", -4);
define("IMG_COLOR_TRANSPARENT", -6);
define("IMG_ARC_ROUNDED", 0);
define("IMG_ARC_PIE", 0);
define("IMG_ARC_CHORD", 1);
define("IMG_ARC_NOFILL", 2);
define("IMG_ARC_EDGED", 4);
define("IMAGETYPE_GIF", 1);
define("IMAGETYPE_JPEG", 2);
define("IMAGETYPE_PNG", 3);
define("IMAGETYPE_SWF", 4);
define("IMAGETYPE_PSD", 5);
define("IMAGETYPE_BMP", 6);
define("IMAGETYPE_WBMP", 15);
define("IMAGETYPE_XBM", 16);
define("IMAGETYPE_TIFF_II", 7);
define("IMAGETYPE_TIFF_MM", 8);
define("IMAGETYPE_IFF", 14);
define("IMAGETYPE_JB2", 12);
define("IMAGETYPE_JPC", 9);
define("IMAGETYPE_JP2", 10);
define("IMAGETYPE_JPX", 11);
define("IMAGETYPE_SWC", 13);



/**
 * Determine the type of an image
 * @param string $filename
 * @return int
 */
function exif_imagetype($filename) {}

/**
 * Reads the headers from or . This way you can read meta data generated by
 * digital cameras.
 * @param string $filename
 * @param string $sections
 * @param bool $arrays
 * @param bool $thumbnail
 * @return array
 */
function exif_read_data($filename, $sections = NULL, $arrays = NULL, $thumbnail = NULL) {}

/**
 * Retrieve the embedded thumbnail of a TIFF or JPEG image
 * @param string $filename
 * @param int $_width
 * @param int $_height
 * @param int $_imagetype
 * @return string
 */
function exif_thumbnail($filename, $_width = NULL, $_height = NULL, $_imagetype = NULL) {}

/**
 * Retrieve information about the currently installed GD library
 * @return array
 */
function gd_info() {}

/**
 * Get the size of an image
 * @param string $filename
 * @param array $imageinfo
 * @return array
 */
function getimagesize($filename, $imageinfo = NULL) {}

/**
 * Get Mime-Type for image-type returned by getimagesize, exif_read_data,
 * exif_thumbnail, exif_imagetype
 * @param int $imagetype
 * @return string
 */
function image_type_to_mime_type($imagetype) {}

/**
 * Output image to browser or file
 * @param resource $image
 * @param string $filename
 * @param int $threshold
 * @return int
 */
function image2wbmp($image, $filename = NULL, $threshold = NULL) {}

/**
 * Set the blending mode for an image
 * @param resource $image
 * @param bool $blendmode
 * @return bool
 */
function imagealphablending($image, $blendmode) {}

/**
 * Should antialias functions be used or not
 * @param resource $im
 * @param bool $on
 * @return bool
 */
function imageantialias($im, $on) {}

/**
 * Draw a partial ellipse
 * @param resource $image
 * @param int $cx
 * @param int $cy
 * @param int $w
 * @param int $h
 * @param int $s
 * @param int $e
 * @param int $color
 * @return int
 */
function imagearc($image, $cx, $cy, $w, $h, $s, $e, $color) {}

/**
 * Draw a character horizontally
 * @param resource $image
 * @param int $font
 * @param int $x
 * @param int $y
 * @param string $c
 * @param int $color
 * @return int
 */
function imagechar($image, $font, $x, $y, $c, $color) {}

/**
 * Draw a character vertically
 * @param resource $image
 * @param int $font
 * @param int $x
 * @param int $y
 * @param string $c
 * @param int $color
 * @return int
 */
function imagecharup($image, $font, $x, $y, $c, $color) {}

/**
 * Allocate a color for an image
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @return int
 */
function imagecolorallocate($image, $red, $green, $blue) {}

/**
 * Allocate a color for an image
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @param int $alpha
 * @return int
 */
function imagecolorallocatealpha($image, $red, $green, $blue, $alpha) {}

/**
 * Get the index of the color of a pixel
 * @param resource $image
 * @param int $x
 * @param int $y
 * @return int
 */
function imagecolorat($image, $x, $y) {}

/**
 * Get the index of the closest color to the specified color
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @return int
 */
function imagecolorclosest($image, $red, $green, $blue) {}

/**
 * Get the index of the closest color to the specified color + alpha
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @param int $alpha
 * @return int
 */
function imagecolorclosestalpha($image, $red, $green, $blue, $alpha) {}

/**
 * Get the index of the color which has the hue, white and blackness nearest to
 * the given color
 * @platform
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @return int
 */
function imagecolorclosesthwb($image, $red, $green, $blue) {}

/**
 * De-allocate a color for an image
 * @param resource $image
 * @param int $color
 * @return int
 */
function imagecolordeallocate($image, $color) {}

/**
 * Get the index of the specified color
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @return int
 */
function imagecolorexact($image, $red, $green, $blue) {}

/**
 * Get the index of the specified color + alpha
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @param int $alpha
 * @return int
 */
function imagecolorexactalpha($image, $red, $green, $blue, $alpha) {}

/**
 * Makes the colors of the palette version of an image more closely match the true
 * color version
 * @param resource $image1
 * @param resource $image2
 * @return bool
 */
function imagecolormatch($image1, $image2) {}

/**
 * Get the index of the specified color or its closest possible alternative
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @return int
 */
function imagecolorresolve($image, $red, $green, $blue) {}

/**
 * Get the index of the specified color + alpha or its closest possible alternative
 * @param resource $image
 * @param int $red
 * @param int $green
 * @param int $blue
 * @param int $alpha
 * @return int
 */
function imagecolorresolvealpha($image, $red, $green, $blue, $alpha) {}

/**
 * Set the color for the specified palette index
 * @param resource $image
 * @param int $index
 * @param int $red
 * @param int $green
 * @param int $blue
 * @return bool
 */
function imagecolorset($image, $index, $red, $green, $blue) {}

/**
 * Get the colors for an index
 * @param resource $image
 * @param int $index
 * @return array
 */
function imagecolorsforindex($image, $index) {}

/**
 * Find out the number of colors in an image's palette
 * @param resource $image
 * @return int
 */
function imagecolorstotal($image) {}

/**
 * Define a color as transparent
 * @param resource $image
 * @param int $color
 * @return int
 */
function imagecolortransparent($image, $color = NULL) {}

/**
 * Copy part of an image
 * @param resource $dst_im
 * @param resource $src_im
 * @param int $dst_x
 * @param int $dst_y
 * @param int $src_x
 * @param int $src_y
 * @param int $src_w
 * @param int $src_h
 * @return int
 */
function imagecopy($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h) {}

/**
 * Copy and merge part of an image
 * @param resource $dst_im
 * @param resource $src_im
 * @param int $dst_x
 * @param int $dst_y
 * @param int $src_x
 * @param int $src_y
 * @param int $src_w
 * @param int $src_h
 * @param int $pct
 * @return int
 */
function imagecopymerge($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct) {}

/**
 * Copy and merge part of an image with gray scale
 * @param resource $dst_im
 * @param resource $src_im
 * @param int $dst_x
 * @param int $dst_y
 * @param int $src_x
 * @param int $src_y
 * @param int $src_w
 * @param int $src_h
 * @param int $pct
 * @return int
 */
function imagecopymergegray($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct) {}

/**
 * Copy and resize part of an image with resampling
 * @param resource $dst_im
 * @param resource $src_im
 * @param int $dstX
 * @param int $dstY
 * @param int $srcX
 * @param int $srcY
 * @param int $dstW
 * @param int $dstH
 * @param int $srcW
 * @param int $srcH
 * @return bool
 */
function imagecopyresampled($dst_im, $src_im, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH) {}

/**
 * Copy and resize part of an image
 * @param resource $dst_im
 * @param resource $src_im
 * @param int $dstX
 * @param int $dstY
 * @param int $srcX
 * @param int $srcY
 * @param int $dstW
 * @param int $dstH
 * @param int $srcW
 * @param int $srcH
 * @return int
 */
function imagecopyresized($dst_im, $src_im, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH) {}

/**
 * Create a new palette based image
 * @param int $x_size
 * @param int $y_size
 * @return resource
 */
function imagecreate($x_size, $y_size) {}

/**
 * Create a new image from GD file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefromgd($filename) {}

/**
 * Create a new image from GD2 file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefromgd2($filename) {}

/**
 * Create a new image from a given part of GD2 file or URL
 * @param string $filename
 * @param int $srcX
 * @param int $srcY
 * @param int $width
 * @param int $height
 * @return resource
 */
function imagecreatefromgd2part($filename, $srcX, $srcY, $width, $height) {}

/**
 * Create a new image from file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefromgif($filename) {}

/**
 * Create a new image from file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefromjpeg($filename) {}

/**
 * Create a new image from file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefrompng($filename) {}

/**
 * Create a new image from the image stream in the string
 * @param string $image
 * @return resource
 */
function imagecreatefromstring($image) {}

/**
 * Create a new image from file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefromwbmp($filename) {}

/**
 * Create a new image from file or URL
 * @param string $filename
 * @return resource
 */
function imagecreatefromxbm($filename) {}

/**
 * Create a new image from file or URL
 * @platform
 * @param string $filename
 * @return resource
 */
function imagecreatefromxpm($filename) {}

/**
 * Create a new true color image
 * @param int $x_size
 * @param int $y_size
 * @return resource
 */
function imagecreatetruecolor($x_size, $y_size) {}

/**
 * Draw a dashed line
 * @param resource $image
 * @param int $x1
 * @param int $y1
 * @param int $x2
 * @param int $y2
 * @param int $color
 * @return int
 */
function imagedashedline($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * Destroy an image
 * @param resource $image
 * @return int
 */
function imagedestroy($image) {}

/**
 * Draw an ellipse
 * @param resource $image
 * @param int $cx
 * @param int $cy
 * @param int $w
 * @param int $h
 * @param int $color
 * @return int
 */
function imageellipse($image, $cx, $cy, $w, $h, $color) {}

/**
 * Flood fill
 * @param resource $image
 * @param int $x
 * @param int $y
 * @param int $color
 * @return int
 */
function imagefill($image, $x, $y, $color) {}

/**
 * Draw a partial ellipse and fill it
 * @param resource $image
 * @param int $cx
 * @param int $cy
 * @param int $w
 * @param int $h
 * @param int $s
 * @param int $e
 * @param int $color
 * @param int $style
 * @return bool
 */
function imagefilledarc($image, $cx, $cy, $w, $h, $s, $e, $color, $style) {}

/**
 * Draw a filled ellipse
 * @param resource $image
 * @param int $cx
 * @param int $cy
 * @param int $w
 * @param int $h
 * @param int $color
 * @return bool
 */
function imagefilledellipse($image, $cx, $cy, $w, $h, $color) {}

/**
 * Draw a filled polygon
 * @param resource $image
 * @param array $points
 * @param int $num_points
 * @param int $color
 * @return int
 */
function imagefilledpolygon($image, $points, $num_points, $color) {}

/**
 * Draw a filled rectangle
 * @param resource $image
 * @param int $x1
 * @param int $y1
 * @param int $x2
 * @param int $y2
 * @param int $color
 * @return int
 */
function imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * Flood fill to specific color
 * @param resource $image
 * @param int $x
 * @param int $y
 * @param int $border
 * @param int $color
 * @return int
 */
function imagefilltoborder($image, $x, $y, $border, $color) {}

/**
 * Get font height
 * @param int $font
 * @return int
 */
function imagefontheight($font) {}

/**
 * Get font width
 * @param int $font
 * @return int
 */
function imagefontwidth($font) {}

/**
 * Give the bounding box of a text using fonts via freetype2
 * @param int $size
 * @param int $angle
 * @param string $font_file
 * @param string $text
 * @param array $extrainfo
 * @return array
 */
function imageftbbox($size, $angle, $font_file, $text, $extrainfo = NULL) {}

/**
 * Write text to the image using fonts using FreeType 2
 * @param resource $image
 * @param int $size
 * @param int $angle
 * @param int $x
 * @param int $y
 * @param int $col
 * @param string $font_file
 * @param string $text
 * @param array $extrainfo
 * @return array
 */
function imagefttext($image, $size, $angle, $x, $y, $col, $font_file, $text, $extrainfo = NULL) {}

/**
 * Apply a gamma correction to a GD image
 * @param resource $image
 * @param float $inputgamma
 * @param float $outputgamma
 * @return int
 */
function imagegammacorrect($image, $inputgamma, $outputgamma) {}

/**
 * Output GD image to browser or file
 * @param resource $image
 * @param string $filename
 * @return int
 */
function imagegd($image, $filename = NULL) {}

/**
 * Output GD2 image
 * @param resource $image
 * @param string $filename
 * @param int $chunk_size
 * @param int $type
 * @return int
 */
function imagegd2($image, $filename = NULL, $chunk_size = NULL, $type = NULL) {}

/**
 * Output image to browser or file
 * @param resource $image
 * @param string $filename
 * @return int
 */
function imagegif($image, $filename = NULL) {}

/**
 * Enable or disable interlace
 * @param resource $image
 * @param int $interlace
 * @return int
 */
function imageinterlace($image, $interlace = NULL) {}

/**
 * Finds whether an image is a truecolor image.
 * @param resource $image
 * @return bool
 */
function imageistruecolor($image) {}

/**
 * Output image to browser or file
 * @param resource $image
 * @param string $filename
 * @param int $quality
 * @return int
 */
function imagejpeg($image, $filename = NULL, $quality = NULL) {}

/**
 * Set the alpha blending flag to use the bundled libgd layering effects
 * @param resource $image
 * @param int $effect
 * @return bool
 */
function imagelayereffect($image, $effect) {}

/**
 * Draw a line
 * @param resource $image
 * @param int $x1
 * @param int $y1
 * @param int $x2
 * @param int $y2
 * @param int $color
 * @return int
 */
function imageline($image, $x1, $y1, $x2, $y2, $color) {}

/**
 * Load a new font
 * @param string $file
 * @return int
 */
function imageloadfont($file) {}

/**
 * Copy the palette from one image to another
 * @param resource $destination
 * @param resource $source
 * @return int
 */
function imagepalettecopy($destination, $source) {}

/**
 * Output a PNG image to either the browser or a file
 * @param resource $image
 * @param string $filename
 * @return int
 */
function imagepng($image, $filename = NULL) {}

/**
 * Draw a polygon
 * @param resource $image
 * @param array $points
 * @param int $num_points
 * @param int $color
 * @return int
 */
function imagepolygon($image, $points, $num_points, $color) {}

/**
 * Give the bounding box of a text rectangle using PostScript Type1 fonts
 * @platform
 * @param string $text
 * @param int $font
 * @param int $size
 * @param int $space
 * @param int $tightness
 * @param float $angle
 * @return array
 */
function imagepsbbox($text, $font, $size, $space = NULL, $tightness = NULL, $angle = NULL) {}

/**
 * Change the character encoding vector of a font
 * @platform
 * @param int $font_index
 * @param string $encodingfile
 * @return int
 */
function imagepsencodefont($font_index, $encodingfile) {}

/**
 * Extend or condense a font
 * @platform
 * @param int $font_index
 * @param float $extend
 * @return bool
 */
function imagepsextendfont($font_index, $extend) {}

/**
 * Free memory used by a PostScript Type 1 font
 * @platform
 * @param int $fontindex
 */
function imagepsfreefont($fontindex) {}

/**
 * Load a PostScript Type 1 font from file
 * @platform
 * @param string $filename
 * @return int
 */
function imagepsloadfont($filename) {}

/**
 * Slant a font
 * @platform
 * @param int $font_index
 * @param float $slant
 * @return bool
 */
function imagepsslantfont($font_index, $slant) {}

/**
 * To draw a text string over an image using PostScript Type1 fonts
 * @platform
 * @param resource $image
 * @param string $text
 * @param int $font
 * @param int $size
 * @param int $foreground
 * @param int $background
 * @param int $x
 * @param int $y
 * @param int $space
 * @param int $tightness
 * @param float $angle
 * @param int $antialias_steps
 * @return array
 */
function imagepstext($image, $text, $font, $size, $foreground, $background, $x, $y, $space = NULL, $tightness = NULL, $angle = NULL, $antialias_steps = NULL) {}

/**
 * Draw a rectangle
 * @param resource $image
 * @param int $x1
 * @param int $y1
 * @param int $x2
 * @param int $y2
 * @param int $col
 * @return int
 */
function imagerectangle($image, $x1, $y1, $x2, $y2, $col) {}

/**
 * Rotate an image with a given angle
 * @param resource $src_im
 * @param float $angle
 * @param int $bgd_color
 * @return resource
 */
function imagerotate($src_im, $angle, $bgd_color) {}

/**
 * Set the flag to save full alpha channel information (as opposed to single-color
 * transparency) when saving PNG images.
 * @param resource $image
 * @param bool $saveflag
 * @return bool
 */
function imagesavealpha($image, $saveflag) {}

/**
 * Set the brush image for line drawing
 * @param resource $image
 * @param resource $brush
 * @return int
 */
function imagesetbrush($image, $brush) {}

/**
 * Set a single pixel
 * @param resource $image
 * @param int $x
 * @param int $y
 * @param int $color
 * @return int
 */
function imagesetpixel($image, $x, $y, $color) {}

/**
 * Set the style for line drawing
 * @param resource $image
 * @param array $style
 * @return bool
 */
function imagesetstyle($image, $style) {}

/**
 * Set the thickness for line drawing
 * @param resource $image
 * @param int $thickness
 * @return bool
 */
function imagesetthickness($image, $thickness) {}

/**
 * Set the tile image for filling
 * @param resource $image
 * @param resource $tile
 * @return int
 */
function imagesettile($image, $tile) {}

/**
 * Draw a string horizontally
 * @param resource $image
 * @param int $font
 * @param int $x
 * @param int $y
 * @param string $s
 * @param int $col
 * @return int
 */
function imagestring($image, $font, $x, $y, $s, $col) {}

/**
 * Draw a string vertically
 * @param resource $image
 * @param int $font
 * @param int $x
 * @param int $y
 * @param string $s
 * @param int $col
 * @return int
 */
function imagestringup($image, $font, $x, $y, $s, $col) {}

/**
 * Get image width
 * @param resource $image
 * @return int
 */
function imagesx($image) {}

/**
 * Get image height
 * @param resource $image
 * @return int
 */
function imagesy($image) {}

/**
 * Convert a true color image to a palette image
 * @param resource $image
 * @param bool $dither
 * @param int $ncolors
 */
function imagetruecolortopalette($image, $dither, $ncolors) {}

/**
 * Give the bounding box of a text using TrueType fonts
 * @param int $size
 * @param int $angle
 * @param string $fontfile
 * @param string $text
 * @return array
 */
function imagettfbbox($size, $angle, $fontfile, $text) {}

/**
 * Write text to the image using TrueType fonts
 * @param resource $image
 * @param int $size
 * @param int $angle
 * @param int $x
 * @param int $y
 * @param int $color
 * @param string $fontfile
 * @param string $text
 * @return array
 */
function imagettftext($image, $size, $angle, $x, $y, $color, $fontfile, $text) {}

/**
 * Return the image types supported by this PHP build
 * @return int
 */
function imagetypes() {}

/**
 * Output image to browser or file
 * @param resource $image
 * @param string $filename
 * @param int $foreground
 * @return int
 */
function imagewbmp($image, $filename = NULL, $foreground = NULL) {}

/**
 * Embed binary IPTC data into a JPEG image
 * @param string $iptcdata
 * @param string $jpeg_file_name
 * @param int $spool
 * @return array
 */
function iptcembed($iptcdata, $jpeg_file_name, $spool = NULL) {}

/**
 * Parse a binary IPTC block into single tags.
 * @param string $iptcblock
 * @return array
 */
function iptcparse($iptcblock) {}

/**
 * Convert JPEG image file to WBMP image file
 * @param string $jpegname
 * @param string $wbmpname
 * @param int $d_height
 * @param int $d_width
 * @param int $threshold
 * @return int
 */
function jpeg2wbmp($jpegname, $wbmpname, $d_height, $d_width, $threshold) {}

/**
 * Convert PNG image file to WBMP image file
 * @param string $pngname
 * @param string $wbmpname
 * @param int $d_height
 * @param int $d_width
 * @param int $threshold
 * @return int
 */
function png2wbmp($pngname, $wbmpname, $d_height, $d_width, $threshold) {}







?>